Why this change?

I wanted to combine the SSLClient and SSLServer projects in a project but found out that this was impossible: Both those libraries contain common modules so the linker generated Multiple-Defined Symbol errors.

I tried overriding this (force the linker to generate an executable even though symbols are defined more than once) and ran into weird problems such as uninitialized data. Apparently the linker really meant it when it said it couldn't generate a valid .exe file.

Combined client/server library project

So I created a project combining the common source files with the client-specific files from SSLClient and the server-specific files from SSLServer. And I ran into a problem that the CredentialTraits::Close and SecurityContext::Close functions had different implementations between SSLServer and SSLClient.

Moved the SSPI security function table to a common class

The Close functions of CredentialTraits and SecurityContext basically call a function from the SSPI security function table; the SSLServer and SSLClient class both retrieved that table as a static variable. So the solution was to create a new class SSLCommon, which contains the SSPI secure function table and the SSPI() function to get access to it. I removed the g_SSPI member from the SSLClient and SSLServer classes and modified both classes to use SSLCommon as public base class so no other code that used the SSPI() function would have to be changed.

Dependencies on MFC

The dependencies on MFC had already been removed from the SSLClient project but not from the SSLServer project. So I did the following:

Replaced usage of CTime and CTimeSpan with classes from the <chrono> include file (C++ 11).

Replaced usage of CEvent with CEventWrapper. I moved the EventWrapper.h file from the SSLClient/Include folder to the Common/Include folder and added SetEvent, ClearEvent and PulseEvent methods

Replaced usage of int (in combination with a critical section) with a volatile atomic_int

Replaced CString(A) with std::string

Replaced Afx... includes with standard includes (Winsock2.h, Windows.h and tchar.h).

Removed any references to AFX_... (and ATL...) macros

Miscellaneous other changes

Toolkit Versions

I modified the projects to build under Visual Studio 2017 because that's the version I use. This mostly manifests itself as a change from platform toolset v142 to v141. If this is undesirable, it's easy to undo by loading the solution file in a late Visual Studio and telling it to upgrade the projects to the latest. It should ask when you load it the first time.

I updated the target platform to 10.0.19014 because that's the one I have (and I think it's the latest at this time). This should also be easy to change if not desired.

Build system changes

I changed the Configuration Manager so that each configuration (Debug, Debug Ansi, and Release) use only their own project builds.

I changed the project files so they all generate their output to $(SolutionDir)$(Platform)\$(Configuration)\ and their intermediate files to $(SolutionDir)$(Platform)\$(Configuration)\_intermediate_files_\$(ProjectName)\. This puts all output files into two subfolders in the base directory, called Win32 and x64. Visual Studio tends to scatter intermediate files all over the place which is annoying when you have to manually clean things up. With these changes, everything ends up in basically one place.

I changed the project files so that the libraries generate a .pdb file in the output directory. Having a .pdb file makes debugging easier, even if the libraries are built in release mode with optimization.

I changed some other options to eliminate compiler and linker warnings. I tested the build in all platform (Win32/x64) and build config (Debug, Debug Ansi, Release) combinations, and ran the StreamServer example (which itself starts the StreamClient example) to make sure that the result was the same every time. I noticed the Debug Ansi build wasn't excluded in .gitignore so I added it.

Conclusion

I changed the sample programs so they use the new StreamSSL library. I didn't make any changes to basic functionality.

It should be possible to eliminate the SSLClient and SSLServer projects altogether. Whenever you write a program that uses only the SSLServer classes or only the SSLClient classes, and links against StreamSSL (which has both), the .exe will still only contain what's necessary. The linker will ignore the modules in the library that aren't referenced.

Thanks for considering this PR!

===Jac




